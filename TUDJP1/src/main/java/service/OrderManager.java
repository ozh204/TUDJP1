package service;

import domain.Order;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class OrderManager
{
    private Connection connection;
    private Statement statement;
    private PreparedStatement deleteAllOrdersStmt;
    private PreparedStatement ModifyPriceStmt;
    private PreparedStatement getOrderByIdStmt;
    private PreparedStatement deleteOrderStmt;
//    pobranie wszystkich y
    private PreparedStatement getAllOrdersStmt;
//    dodanie do tabeli x, dodanie do tabeli y
    private PreparedStatement addOrderStmt;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";
    private String createTableOrder = "CREATE TABLE \"Order\"(id bigint GENERATED BY DEFAULT AS IDENTITY, date DATE, price DECIMAL(5,1))";

    public OrderManager()
    {
        try
        {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next())
            {
                if ("Order".equalsIgnoreCase(rs.getString("TABLE_NAME")))
                {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableOrder);


            getAllOrdersStmt = connection.prepareStatement("SELECT * FROM \"Order\"");
            addOrderStmt = connection.prepareStatement("INSERT INTO \"Order\"(date, price) VALUES(?,?)");
            deleteAllOrdersStmt = connection.prepareStatement("DELETE FROM \"Order\"");
            ModifyPriceStmt = connection.prepareStatement("UPDATE \"Order\" SET price=? WHERE id=?");
            getOrderByIdStmt = connection.prepareStatement("SELECT * FROM \"Order\" WHERE id=?");
            deleteOrderStmt = connection.prepareStatement("DELETE FROM \"Order\" WHERE id=?");
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    Connection getConnection()
    {
        return connection;
    }

    public void clearOrders()
    {
        try
        {
            deleteAllOrdersStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    public int addOrder(Order order)
    {
        int count = 0;

        try
        {
            addOrderStmt.setDouble(2, order.getPrice());
            addOrderStmt.setDate(1, order.getDate());

            count = addOrderStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return count;
    }

    public List<Order> getAllOrders()
    {
        List<Order> orders = new ArrayList<Order>();

        try
        {
            ResultSet rs = getAllOrdersStmt.executeQuery();

            while (rs.next())
            {
                Order order = new Order();

                order.setId(rs.getInt("id"));
                order.setPrice(rs.getDouble("price"));
                order.setDate(rs.getDate("date"));

                orders.add(order);
            }

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return orders;
    }

    public void modifyPrice(Order order) throws SQLException
    {
        try
        {
            ModifyPriceStmt.setDouble(1, order.getPrice());
            ModifyPriceStmt.setInt(2, order.getId());
            ModifyPriceStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    public Order getOrderById(Integer id) throws SQLException
    {
        Order order = new Order();
        try
        {
            getOrderByIdStmt.setInt(1, id);
            ResultSet rs = getOrderByIdStmt.executeQuery();

            while(rs.next())
            {
                order.setId(rs.getInt("id"));
                order.setPrice(rs.getDouble("price"));
                order.setDate(rs.getDate("date"));
            }
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }

        return order;
    }

    public int delete(Integer id) throws SQLException
    {
        int count = 0;

        try
        {
            deleteOrderStmt.setInt(1, id);
            count = deleteOrderStmt.executeUpdate();
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }

        return count;
    }
}
